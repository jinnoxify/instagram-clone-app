{"version":3,"sources":["components/firebase.js","components/Posts.js","components/ImageUpload.js","App.js","serviceWorker.js","index.js"],"names":["firebaseApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","db","firestore","auth","storage","Posts","postId","user","username","caption","imageUrl","useState","comments","setComments","comment","setComment","useEffect","unsubscribe","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","className","Avatar","alt","src","text","type","placeholder","value","onChange","e","target","disabled","onClick","preventDefault","add","displayName","timestamp","FieldValue","serverTimestamp","ImageUpload","image","setImage","progress","setProgress","setCaption","max","files","Button","ref","name","put","on","Math","round","bytesTransferred","totalBytes","error","console","log","alert","message","child","getDownloadURL","then","url","getModalStyle","top","left","transform","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","App","classes","React","modalStyle","posts","setPosts","open","setOpen","email","setEmail","password","setPassword","setUsername","openSignIn","setOpenSignIn","setUser","onAuthStateChanged","authUser","id","post","body","style","Input","createUserWithEmailAndPassword","updateProfile","catch","body2","signInWithEmailAndPassword","Modal","onClose","signOut","key","maxWidth","hideCaption","containerTagName","protocol","injectScript","onLoading","onSuccess","onAfterRender","onFailure","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1f5a3ca3.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyBxWvUfD_9YCAqjf705NhGS_DKL-tzmEfE\",\r\n  authDomain: \"instagram-clone-app-f9be5.firebaseapp.com\",\r\n  databaseURL: \"https://instagram-clone-app-f9be5.firebaseio.com\",\r\n  projectId: \"instagram-clone-app-f9be5\",\r\n  storageBucket: \"instagram-clone-app-f9be5.appspot.com\",\r\n  messagingSenderId: \"456351991307\",\r\n  appId: \"1:456351991307:web:d2e4990d161c874e23690e\",\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebaseApp.auth();\r\nconst storage = firebaseApp.storage();\r\n\r\nexport { db, auth, storage };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Post.css\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport { db } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\n\r\nfunction Posts({ postId, user, username, caption, imageUrl }) {\r\n  const [comments, setComments] = useState([]);\r\n  const [comment, setComment] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let unsubscribe;\r\n    if (postId) {\r\n      unsubscribe = db\r\n        .collection(\"posts\")\r\n        .doc(postId)\r\n        .collection(\"comments\")\r\n        .orderBy(\"timestamp\", \"desc\")\r\n        .onSnapshot((snapshot) => {\r\n          setComments(snapshot.docs.map((doc) => doc.data()));\r\n        });\r\n    }\r\n    return () => {\r\n      unsubscribe();\r\n    };\r\n  }, [postId]);\r\n\r\n  const postComment = (e) => {\r\n    e.preventDefault();\r\n    db.collection(\"posts\").doc(postId).collection(\"comments\").add({\r\n      text: comment,\r\n      username: user.displayName,\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n    });\r\n    setComment(\"\");\r\n  };\r\n  return (\r\n    <div className=\"post\">\r\n      <div className=\"post__header\">\r\n        <Avatar\r\n          className=\"post__avatar\"\r\n          alt=\"Juan\"\r\n          src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcRpqIIW6mi5cQJfVwZ3XFv0cURSryTJ5CqWAg&usqp=CAU\"\r\n        />\r\n        <h3>{username}</h3>\r\n      </div>\r\n      <img className=\"post__image\" src={imageUrl} />\r\n      <h4 className=\"post__text\">\r\n        <strong>{username}</strong> {caption}\r\n      </h4>\r\n      <div className=\"post__comments\">\r\n        {comments.map((comment) => (\r\n          <p>\r\n            <strong>{comment.username}</strong> {comment.text}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      {user && (\r\n        <form className=\"post__commentBox\">\r\n          <input\r\n            className=\"post__input\"\r\n            type=\"text\"\r\n            placeholder=\"Add a comment..\"\r\n            value={comment}\r\n            onChange={(e) => setComment(e.target.value)}\r\n          />\r\n          <button\r\n            disabled={!comment}\r\n            className=\"post__button\"\r\n            type=\"submit\"\r\n            onClick={postComment}\r\n          >\r\n            Post\r\n          </button>\r\n        </form>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Posts;\r\n","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport { storage, db } from \"./firebase\";\r\nimport firebase from \"firebase\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload({ username }) {\r\n  const [image, setImage] = useState(null);\r\n  const [progress, setProgress] = useState(0);\r\n  const [caption, setCaption] = useState(\"\");\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.files[0]) {\r\n      setImage(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleUpload = () => {\r\n    const uploadTask = storage.ref(`images/${image.name}`).put(image);\r\n\r\n    uploadTask.on(\r\n      \"state_changed\",\r\n      (snapshot) => {\r\n        // progress function..\r\n        const progress = Math.round(\r\n          (snapshot.bytesTransferred / snapshot.totalBytes) * 100\r\n        );\r\n        setProgress(progress);\r\n      },\r\n      (error) => {\r\n        // error function...\r\n        console.log(error);\r\n        alert(error.message);\r\n      },\r\n      () => {\r\n        // complete function\r\n        storage\r\n          .ref(\"images\")\r\n          .child(image.name)\r\n          .getDownloadURL()\r\n          .then((url) => {\r\n            // post image inside db\r\n            db.collection(\"posts\").add({\r\n              timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n              caption: caption,\r\n              imageUrl: url,\r\n              username: username,\r\n            });\r\n            setProgress(0);\r\n            setCaption(\"\");\r\n            setImage(null);\r\n          });\r\n      }\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"imageUpload\">\r\n      <progress\r\n        className=\"imageupload__progress\"\r\n        value={progress}\r\n        max=\"100\"\r\n      ></progress>\r\n      <input\r\n        text=\"text\"\r\n        placeholder=\"Enter a caption...\"\r\n        value={caption}\r\n        onChange={(e) => setCaption(e.target.value)}\r\n      />\r\n      <input type=\"file\" onChange={handleChange} />\r\n      <Button onClick={handleUpload}>Upload</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport Posts from \"./components/Posts\";\nimport { db, auth } from \"./components/firebase\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport { Button, Input } from \"@material-ui/core\";\nimport ImageUpload from \"./components/ImageUpload\";\nimport InstagramEmbed from \"react-instagram-embed\";\n\nfunction getModalStyle() {\n  const top = 50;\n  const left = 50;\n\n  return {\n    top: `${top}%`,\n    left: `${left}%`,\n    transform: `translate(-${top}%, -${left}%)`,\n  };\n}\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    position: \"absolute\",\n    width: 400,\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [modalStyle] = React.useState(getModalStyle);\n  const [posts, setPosts] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [openSignIn, setOpenSignIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n  useEffect(() => {\n    const unsubscribe = auth.onAuthStateChanged((authUser) => {\n      if (authUser) {\n        // user has logged in...\n        console.log(authUser);\n        setUser(authUser);\n      } else {\n        // user has logged out...\n        setUser(null);\n      }\n    });\n\n    return () => {\n      unsubscribe();\n    };\n  }, [user, username]);\n\n  useEffect(() => {\n    db.collection(\"posts\")\n      .orderBy(\"timestamp\", \"desc\")\n      .onSnapshot((snapshot) => {\n        setPosts(\n          snapshot.docs.map((doc) => ({ id: doc.id, post: doc.data() }))\n        );\n      });\n  }, []);\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const signUp = (e) => {\n    e.preventDefault();\n    auth\n      .createUserWithEmailAndPassword(email, password)\n      .then((authUser) => {\n        authUser.user.updateProfile({\n          displayName: username,\n        });\n      })\n      .catch((error) => alert(error.message));\n  };\n\n  const signIn = (e) => {\n    e.preventDefault();\n    auth\n      .signInWithEmailAndPassword(email, password)\n      .catch((error) => alert(error.message));\n    setOpenSignIn(false);\n  };\n\n  const body = (\n    <div style={modalStyle} className={classes.paper}>\n      <form className=\"app__signup\">\n        <center>\n          <img\n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n            alt=\"\"\n          />\n        </center>\n        <Input\n          placeholder=\"username\"\n          type=\"username\"\n          value={username}\n          onChange={(e) => setUsername(e.target.value)}\n        />\n        <Input\n          placeholder=\"email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <Input\n          placeholder=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <Button type=\"submit\" onClick={signUp}>\n          Sign up\n        </Button>\n      </form>\n    </div>\n  );\n  const body2 = (\n    <div style={modalStyle} className={classes.paper}>\n      <form className=\"app__signup\">\n        <center>\n          <img\n            className=\"app__headerImage\"\n            src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n            alt=\"\"\n          />\n        </center>\n        <Input\n          placeholder=\"email\"\n          type=\"text\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <Input\n          placeholder=\"password\"\n          type=\"password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n        />\n        <Button type=\"submit\" onClick={signIn}>\n          Sign up\n        </Button>\n      </form>\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <div className=\"app__header\">\n        <Modal open={open} onClose={handleClose}>\n          {body}\n        </Modal>\n        <Modal open={openSignIn} onClose={() => setOpenSignIn(true)}>\n          {body2}\n        </Modal>\n        <img\n          className=\"app__headerImage\"\n          src=\"https://www.instagram.com/static/images/web/mobile_nav_type_logo.png/735145cfe0a4.png\"\n          alt=\"\"\n        />\n        {user ? (\n          <Button onClick={() => auth.signOut()}>Logout</Button>\n        ) : (\n          <div>\n            <Button type=\"submit\" onClick={() => setOpenSignIn(true)}>\n              Sign in\n            </Button>\n            <Button type=\"submit\" onClick={handleOpen}>\n              Sign up\n            </Button>\n          </div>\n        )}\n      </div>\n      <div className=\"app__post\">\n        <div className=\"app__postsRight\">\n          {posts.map(({ id, post }) => (\n            <Posts\n              user={user}\n              postId={id}\n              key={id}\n              username={post.username}\n              caption={post.caption}\n              imageUrl={post.imageUrl}\n            />\n          ))}\n        </div>\n        <div className=\"app__postsLeft\">\n          <InstagramEmbed\n            url=\"https://instagr.am/p/Zw9o4/\"\n            maxWidth={320}\n            hideCaption={false}\n            containerTagName=\"div\"\n            protocol=\"\"\n            injectScript\n            onLoading={() => {}}\n            onSuccess={() => {}}\n            onAfterRender={() => {}}\n            onFailure={() => {}}\n          />\n        </div>\n      </div>\n\n      {user?.displayName ? (\n        <ImageUpload username={user.displayName} />\n      ) : (\n        <h3>Sorry you need to login to upload</h3>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}